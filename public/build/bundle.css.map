{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "SvelteCodemirror.svelte",
    "CodeMirror.svelte"
  ],
  "sourcesContent": [
    "<svelte:head>\n    <title>Svelte Codemirror</title>\n</svelte:head>\n\n<div id=\"edContainer\">\n  <div id=\"edRow\">\n    <div id=\"firstEd\">\n      <CodeMirror\n        height=\"300px\"\n        width=\"500px\"\n        config={edConfigMD}\n        initFinished={loadDone};\n        on:textChange={textChange}\n        on:editorChange={editorChange}\n      />\n    </div>\n    <div id=\"secondEd\">\n      <CodeMirror\n        height=\"300px\"\n        width=\"500px\"\n        config={edConfigJ}\n        initFinished={loadDone};\n        on:textChange={textChangeJ}\n        on:editorChange={editorChangeJ}\n      />\n    </div>\n    <div id=\"thirdEd\">\n      <CodeMirror\n        height=\"300px\"\n        width=\"500px\"\n        config={edConfigJ2}\n        initFinished={loadDone};\n        on:textChange={textChangeJ2}\n        on:editorChange={editorChangeJ2}\n      />\n    </div>\n  </div>\n  <button on:click={addText} >Add Text</button>\n</div>\n\n<style>\n  #edContainer {\n    display: flex;\n    flex-direction: column;\n    height: 300px;\n    width: 500px;\n  }\n\n  #edRow {\n    display: flex;\n    flex-direction: row;\n    width: 1500px;\n    height: 300px;\n  }\n\n  #firstEd {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n  }\n\n  #secondEd {\n    position: absolute;\n    top: 10px;\n    left: 520px;\n  }\n\n  #thirdEd {\n    position: absolute;\n    top: 10px;\n    left: 1030px;\n  }\n\n\n  #edContainer button {\n    position: absolute;\n    bottom: 5px;\n    left: 5px;\n  }\n</style>\n\n<script>\n  import CodeMirror from \"./components/CodeMirror.svelte\";\n  import { onMount } from \"svelte\";\n\n  let loadDone = false;\n  let edConfigMD = {\n    language: 'markdown',\n    lineNumbers: false,\n    lineWrapping: true,\n    lineHighlight: true\n  };\n  let edConfigJ = {\n    language: 'javascript',\n    lineNumbers: true,\n    lineWrapping: false,\n    lineHighlight: true\n  };\n  let edConfigJ2 = {\n    language: 'javascript',\n    lineNumbers: true,\n    lineWrapping: true,\n    lineHighlight: true\n  };\n  let text = `# This is a test\n\n- A note\n- Another note\n\nThis is *some* text.\n\n  It is on several lines and is for testing the CodeMirror editor on the web page. This is a test site.\n\n  This is some more text.\n\n  It is on several lines and is for testing the CodeMirror editor on the web page. This is a test site.\n\n  `;\n  let cm;\n  let textj = `\nfunction test() {\n  if(test == null) {\n    console.log(\"not a test\")\n  } else {\n    console.log(\"a test\")\n  }\n}\n  `;\n  let cmj;\n  let textj2 = `function test() {\n  if(test == null) {\n    console.log(\"not a test\")\n  } else {\n    console.log(\"a test\")\n  }\n}\n`;\n  let cmj2;\n\n\n  onMount(() => {\n    loadDone = true;\n  });\n\n  function textChange(e) {\n    text = e.detail.data.value;\n  }\n\n  function editorChange(e) {\n    cm = e.detail.data;\n  }\n\n  function textChangeJ(e) {\n    textj = e.detail.data.value;\n  }\n\n  function editorChangeJ(e) {\n    cmj = e.detail.data;\n  }\n\n  function textChangeJ2(e) {\n    textj2 = e.detail.data.value;\n  }\n\n  function editorChangeJ2(e) {\n    cmj2 = e.detail.data;\n  }\n\n  function addText(e) {\n    if(typeof cm !== 'undefined') {\n      text += text;\n      cm.setValue(text);\n    }\n    if(typeof cmj !== 'undefined') {\n      textj += textj;\n      cmj.setValue(textj);\n    }\n    if(typeof cmj2 !== 'undefined') {\n      textj2 += textj2;\n      cmj2.setValue(textj2);\n    }\n  }\n</script>\n\n",
    "<div class=\"wrapper\" style=\"height: {height}; width: {width};\">\n  <div name=\"editor\" id=\"CMeditor\" bind:this='{CodeMirrorEditor}' >\n  </div>\n</div>\n\n<style>\n  #CMeditor {\n    height: 100%;\n    width: 100%;\n  }\n  .wrapper {\n    position: absolute;\n  }\n\n  :global(.cm-wrap) {\n    height: 100%;\n  }\n\n  :global(.cm-scroller) { \n    overflow: auto; \n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  import { createEventDispatcher } from 'svelte';\n  import { markdown } from \"@codemirror/lang-markdown\"\n  import { oneDark } from \"@codemirror/theme-one-dark\"\n  import { highlightSpecialChars, drawSelection, highlightActiveLine, keymap, EditorView } from '@codemirror/view';\n  import { EditorState, Prec } from '@codemirror/state';\n  import { history, historyKeymap } from '@codemirror/history';\n  import { indentOnInput } from '@codemirror/language';\n  import { lineNumbers } from '@codemirror/gutter';\n  import { defaultKeymap } from '@codemirror/commands';\n  import { bracketMatching } from '@codemirror/matchbrackets';\n  import { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets';\n  import { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\n  import { autocompletion, completionKeymap } from '@codemirror/autocomplete';\n  import { commentKeymap } from '@codemirror/comment';\n  import { rectangularSelection } from '@codemirror/rectangular-selection';\n  import { defaultHighlightStyle } from '@codemirror/highlight';\n  import { lintKeymap } from '@codemirror/lint';\n  import { javascript } from '@codemirror/lang-javascript';\n\n  const dispatch = createEventDispatcher();\n  \n  export let height;\n  export let width;\n  export let config;\n  export let initFinished = false;\n\n  let CodeMirrorEditor;\n  let edState;\n  let edView;\n  let editorFunctions;\n  let currentCursor;\n\n  function fire(name, data) {\n    dispatch(name, {\n      data: data\n    });\n  }\n\n  function setValue(text) {\n    // \n    // Since we are setting a whole new document, create new editor \n    // states and views.\n    // \n    if(initFinished) {\n      CreateEditorState(text);\n    }\n  }\n\n  function CreateEditorState(text) {\n    // \n    // Clear out the div element in case a previous editor was\n    // created.\n    //\n    CodeMirrorEditor.innerHTML = '';\n\n    //\n    // Setup the extensions array.\n    //\n    const exts = [\n      highlightSpecialChars(),\n      history(),\n      drawSelection(),\n      EditorState.allowMultipleSelections.of(true),\n      indentOnInput(),\n      Prec.fallback(defaultHighlightStyle),\n      bracketMatching(),\n      closeBrackets(),\n      autocompletion(),\n      rectangularSelection(),\n      highlightSelectionMatches(),\n      keymap.of([\n          ...closeBracketsKeymap,\n          ...defaultKeymap,\n          ...searchKeymap,\n          ...historyKeymap,\n          ...commentKeymap,\n          ...completionKeymap,\n          ...lintKeymap\n      ]),\n      oneDark,\n      EditorView.updateListener.of(update => {\n        if(update.docChanged) {\n          fire('textChange', {\n            value: getValue(),\n            cursor: getCursor(),\n            history: {}\n          })\n        }\n      })\n    ];\n\n    // \n    // Add extensions based on the configuration.\n    // \n    if(config.lineNumbers) {\n      exts.push(lineNumbers());\n    }\n\n    switch(config.language) {\n      case 'markdown':\n        exts.push(markdown());\n        break;\n      case 'javascript':\n        exts.push(javascript());\n        break;\n      default: \n        exts.push(markdown());\n        break;\n    }\n\n    if(config.lineWrapping) {\n      exts.push(EditorView.lineWrapping);\n    }\n\n    if(config.lineHighlight) {\n      exts.push(highlightActiveLine());\n    }\n    \n    // \n    // Create the editor state.\n    //\n    edState = EditorState.create({\n      doc: text,\n      extensions: exts\n    });\n\n    // \n    // Create the editor View.\n    // \n    edView = new EditorView({\n      state: edState,\n      parent: CodeMirrorEditor\n    });\n  }\n\n  onMount(() => {\n    // \n    // Create the editor.\n    // \n    CreateEditorState('');\n\n    //\n    // Create the editor functions object.\n    //\n    editorFunctions = {\n      getSelection: getSelection,\n      getValue: getValue,\n      replaceSelection: replaceSelection,\n      somethingSelected: somethingSelected,\n      setCursor: setCursor,\n      getCursor: getCursor,\n      setValue: setValue,\n      getLine: getLine,\n      focus: focus\n    };\n    \n    //\n    // Debugging: add to the window for testing.\n    //\n    if(typeof window.edFunctions === 'undefined') window.edFunctions = [];\n    window.edFunctions.push(editorFunctions);\n\n    //\n    // Give the parent the functions for interacting with the editor.\n    //\n    fire('editorChange', editorFunctions);\n\n    // \n    // Make sure the editor is focused.\n    //\n    focus();\n\n    //\n    // Return a function to run to clean up after mounting.\n    //\n    return () => {\n      // this function runs when the\n      // component is destroyed\n    };\n  });\n\n  function getLine(pos) {\n    if(typeof edView !== 'undefined') {\n      var result = \"\";\n      return(result);\n    }\n    return('');\n  }\n\n  function getSelection() {\n    if(typeof edView !== 'undefined') {\n      return edView.state.sliceDoc(\n        edView.state.selection.main.from,\n        edView.state.selection.main.to);\n    }\n  }\n\n  function replaceSelection(newText) {\n    if(typeof edView !== 'undefined') {\n      let transaction = edView.state.update({changes: [{from: edView.state.selection.main.from, to: edView.state.selection.main.to}, {from: 0, insert: newText}]});\n      edView.dispatch(transaction);\n    }\n  }\n\n  function somethingSelected() {\n    if(typeof edView !== 'undefined') {\n      return edView.state.selection.ranges.some(r => !r.empty);\n    }\n  }\n\n  function setCursor(pos) {\n    if(typeof edView !== 'undefined') {\n      currentCursor = pos;\n      edView.dispatch({selection: {anchor: currentCursor}})\n    }\n  }\n\n  function getCursor() {\n    if(typeof edView !== 'undefined') {\n      currentCursor = edView.state.selection.main.head;\n      return(currentCursor);\n    } else {\n      return(0);\n    }\n  }\n\n  function getValue() {\n    if(typeof edView !== 'undefined') {\n      return edView.state.doc.toString();\n    }\n  }\n\n  function focus() {\n    if(typeof edView !== 'undefined') {\n      edView.focus();\n    }\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "AAyCE,YAAY,8BAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,AACd,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,KAAK,AACf,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,SAAS,8BAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,KAAK,AACb,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,MAAM,AACd,CAAC,AAGD,2BAAY,CAAC,MAAM,eAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,GAAG,CACX,IAAI,CAAE,GAAG,AACX,CAAC;ACxED,SAAS,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAEO,QAAQ,AAAE,CAAC,AACjB,MAAM,CAAE,IAAI,AACd,CAAC,AAEO,YAAY,AAAE,CAAC,AACrB,QAAQ,CAAE,IAAI,AAChB,CAAC"
}